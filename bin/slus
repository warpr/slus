#!/usr/bin/env python
# -*- encoding: utf-8 -*-

import re
import subprocess
import sys
from rdflib import ConjunctiveGraph, Namespace
from collections import namedtuple

verbose = True

RDF = Namespace ('http://www.w3.org/1999/02/22-rdf-syntax-ns#')
RDFS = Namespace ('http://www.w3.org/2000/01/rdf-schema#')
SLUS = Namespace ('https://frob.nl/slus/ontology#')

a = RDF.type

Mapping = namedtuple ('Mapping', 'protocol external internal')
ForwardCommand = namedtuple ('ForwardCommand', 'cmd desc mapping')
ListOutput = namedtuple ('ListOutput', 'ip mappings')

def message (msg):
    line = u"[sl√ªs] " + msg
    print line.encode ('utf-8')

def rdf_value (graph, subject, predicate, default = None):
    try:
        return next (graph.objects(subject, predicate))
    except StopIteration:
        return default

def parse_rule (graph, rule):
    desc = rdf_value (graph, rule, RDFS.comment, '<unnamed rule>')
    proto = rdf_value (graph, rule, SLUS.protocol)
    external = rdf_value (graph, rule, SLUS.external)
    internal = rdf_value (graph, rule, SLUS.internal)

    if proto not in ("TCP", "UDP"):
        return None

    if desc and proto and external and internal:
        rule = Mapping (unicode(proto), int(external), int(internal))
        return (unicode(desc), rule)

def parse_config (filename):
    g = ConjunctiveGraph ()
    g.parse (filename, format='n3')

    ret = {}
    for rule in g.subjects (a, SLUS.Rule):
        (desc, mapping) = parse_rule(g, rule)
        ret[mapping] = desc

    return ret

def run_command (desc, cmd):
    message(desc)
    try:
        return subprocess.check_output(cmd, stderr=subprocess.STDOUT, shell=True)
    except subprocess.CalledProcessError as e:
        print "An error occured while running:", e.cmd
        print e.output
        sys.exit(e.returncode)


def parse_upnpc_l(output):
    forwardline = re.compile("\s+(\d+)\s+(TCP|UDP)\s+(\d+)->(\d+\.\d+\.\d+\.\d+):(\d+)\s+")

    ip = None
    mappings = {}
    for line in output.split("\n"):
        m = forwardline.match(line)
        if m:
            groups = m.groups()
            desc = "Rule " + groups[0]
            rule = Mapping (groups[1], int(groups[2]), int(groups[4]))
            mappings[rule] = desc
        elif line.startswith("Local LAN ip address"):
            (_, ip) = line.split (' : ')

    if not ip:
        print "Could not parse upnpc -l output"
        sys.exit (1)

    return ListOutput(ip, mappings)


def verify_mappings ():
    output = run_command('Verifying open ports', 'upnpc -l')
    return parse_upnpc_l(output)

def commands (cfg, ipv4):
    for rule, desc in cfg.items():
        cmd = "upnpc -a %s %d %d %s" % (
            ipv4, rule.internal, rule.external, rule.protocol)
        yield ForwardCommand (cmd, desc, rule)


current = verify_mappings ()
wanted = commands (parse_config("/etc/slus/ports.ttl"), current.ip)

for cmd in wanted:
    if cmd.mapping in current.mappings:
        message("Forwarding present for: " + cmd.desc)
    else:
        output = run_command ("Setting up mapping: " + cmd.desc, cmd.cmd)
        if verbose:
            print output

